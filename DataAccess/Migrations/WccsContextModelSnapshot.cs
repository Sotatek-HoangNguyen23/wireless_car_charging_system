// <auto-generated />
using System;
using DataAccess.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(WccsContext))]
    partial class WccsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Balance", b =>
                {
                    b.Property<int>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("balance_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BalanceId"));

                    b.Property<double?>("Balance1")
                        .HasColumnType("float")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("BalanceId")
                        .HasName("PK__balance__18188B5BD63A0434");

                    b.HasIndex("UserId");

                    b.ToTable("balance", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.BalanceTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("transaction_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<int>("BalanceId")
                        .HasColumnType("int")
                        .HasColumnName("balance_id");

                    b.Property<string>("OrderCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("order_code");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("TransactionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transaction_date");

                    b.Property<string>("TransactionType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("transaction_type");

                    b.HasKey("TransactionId")
                        .HasName("PK__balance___85C600AFE67830BB");

                    b.HasIndex("BalanceId");

                    b.ToTable("balance_transactions", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Car", b =>
                {
                    b.Property<int>("CarId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarId"));

                    b.Property<int>("CarModelId")
                        .HasColumnType("int")
                        .HasColumnName("car_model_id");

                    b.Property<string>("CarName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("car_name");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("ImgBack")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("img_back");

                    b.Property<string>("ImgBackPubblicId")
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)")
                        .HasColumnName("img_backPubblicId");

                    b.Property<string>("ImgFront")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("img_front");

                    b.Property<string>("ImgFrontPubblicId")
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)")
                        .HasColumnName("img_frontPubblicId");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("license_plate");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("CarId")
                        .HasName("PK__car__4C9A0DB361790547");

                    b.HasIndex("CarModelId");

                    b.ToTable("car", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.CarModel", b =>
                {
                    b.Property<int>("CarModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("car_model_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarModelId"));

                    b.Property<double?>("AverageRange")
                        .HasColumnType("float")
                        .HasColumnName("average_range");

                    b.Property<double?>("BatteryCapacity")
                        .HasColumnType("float")
                        .HasColumnName("battery_capacity");

                    b.Property<string>("Brand")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("brand");

                    b.Property<string>("ChargingStandard")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("charging_standard");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("color");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("Img")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("img");

                    b.Property<double?>("MaxChargingPower")
                        .HasColumnType("float")
                        .HasColumnName("max_charging_power");

                    b.Property<int?>("SeatNumber")
                        .HasColumnType("int")
                        .HasColumnName("seat_number");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("CarModelId")
                        .HasName("PK__car_mode__6F9B237770240B8F");

                    b.ToTable("car_model", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Cccd", b =>
                {
                    b.Property<int>("CccdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cccd_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CccdId"));

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("ImgBack")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("img_back");

                    b.Property<string>("ImgBackPubblicId")
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)")
                        .HasColumnName("img_backPubblicId");

                    b.Property<string>("ImgFront")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("img_front");

                    b.Property<string>("ImgFrontPubblicId")
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)")
                        .HasColumnName("img_frontPubblicId");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("CccdId")
                        .HasName("PK__cccd__E47A6DF186DFDDA1");

                    b.HasIndex("UserId");

                    b.ToTable("cccd", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ChargingPoint", b =>
                {
                    b.Property<int>("ChargingPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("charging_point_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChargingPointId"));

                    b.Property<string>("ChargingPointName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("charging_point_name");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<double?>("MaxConsumPower")
                        .HasColumnType("float");

                    b.Property<double?>("MaxPower")
                        .HasColumnType("float")
                        .HasColumnName("max_power");

                    b.Property<int>("StationId")
                        .HasColumnType("int")
                        .HasColumnName("station_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("ChargingPointId")
                        .HasName("PK__charging__D7F59537E93399D3");

                    b.HasIndex("StationId");

                    b.ToTable("charging_point", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ChargingSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("session_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<int>("ChargingPointId")
                        .HasColumnType("int")
                        .HasColumnName("charging_point_id");

                    b.Property<double?>("Cost")
                        .HasColumnType("float")
                        .HasColumnName("cost");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<double?>("EnergyConsumed")
                        .HasColumnType("float")
                        .HasColumnName("energy_consumed");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId")
                        .HasName("PK__charging__69B13FDCFCA28892");

                    b.HasIndex("CarId");

                    b.HasIndex("ChargingPointId");

                    b.HasIndex("UserId");

                    b.ToTable("charging_session", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.ChargingStation", b =>
                {
                    b.Property<int>("StationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("station_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationId"));

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<double?>("MaxConsumPower")
                        .HasColumnType("float");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("owner_id");

                    b.Property<int>("StationLocationId")
                        .HasColumnType("int")
                        .HasColumnName("station_location_id");

                    b.Property<string>("StationName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("station_name");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("StationId")
                        .HasName("PK__charging__44B370E943FB6D23");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StationLocationId");

                    b.ToTable("charging_station", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.DocumentReview", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("review_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<int?>("CccdId")
                        .HasColumnType("int")
                        .HasColumnName("cccd_id");

                    b.Property<string>("Comments")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("comments");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int?>("DriverLicenseId")
                        .HasColumnType("int")
                        .HasColumnName("driver_license_id");

                    b.Property<string>("ReviewType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("review_type");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("reviewed_at");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("int")
                        .HasColumnName("reviewed_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at")
                        .HasDefaultValueSql("(sysutcdatetime())");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ReviewId")
                        .HasName("PK__document__60883D90C6213A68");

                    b.HasIndex("CarId");

                    b.HasIndex("CccdId");

                    b.HasIndex("DriverLicenseId");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("UserId");

                    b.ToTable("document_review", null, t =>
                        {
                            t.HasTrigger("trg_document_review_update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("DataAccess.Models.DriverLicense", b =>
                {
                    b.Property<int>("DriverLicenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("driver_license_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverLicenseId"));

                    b.Property<string>("Class")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("class");

                    b.Property<string>("Code")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("ImgBack")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("img_back");

                    b.Property<string>("ImgBackPubblicId")
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)")
                        .HasColumnName("img_backPubblicId");

                    b.Property<string>("ImgFront")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("img_front");

                    b.Property<string>("ImgFrontPubblicId")
                        .HasMaxLength(225)
                        .IsUnicode(false)
                        .HasColumnType("varchar(225)")
                        .HasColumnName("img_frontPubblicId");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("DriverLicenseId")
                        .HasName("PK__driver_l__5EB6C89FF2E32C21");

                    b.HasIndex("UserId");

                    b.ToTable("driver_license", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("message");

                    b.Property<int?>("PointId")
                        .HasColumnType("int")
                        .HasColumnName("point_id");

                    b.Property<string>("Response")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("response");

                    b.Property<int?>("StationId")
                        .HasColumnType("int")
                        .HasColumnName("station_id");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("type");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("FeedbackId")
                        .HasName("PK__feedback__7A6B2B8C73826BE4");

                    b.HasIndex("CarId");

                    b.HasIndex("PointId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("feedback", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<double?>("Amount")
                        .HasColumnType("float")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("payment_status");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("session_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId")
                        .HasName("PK__payment__ED1FC9EA073110F9");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserId");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.RealTimeDatum", b =>
                {
                    b.Property<int>("DataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("data_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DataId"));

                    b.Property<string>("BatteryLevel")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("battery_level");

                    b.Property<string>("BatteryVoltage")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("battery_voltage");

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<string>("ChargingCurrent")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("charging_current");

                    b.Property<string>("ChargingPower")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("charging_power");

                    b.Property<string>("ChargingTime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("charging_time");

                    b.Property<int>("ChargingpointId")
                        .HasColumnType("int")
                        .HasColumnName("chargingpoint_id");

                    b.Property<string>("Cost")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("cost");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<string>("EnergyConsumed")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("energy_consumed");

                    b.Property<string>("LicensePlate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("license_plate");

                    b.Property<string>("Powerpoint")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("powerpoint");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("StepCost")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("step_cost");

                    b.Property<string>("Temperature")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("temperature");

                    b.Property<DateTime?>("TimeMoment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("time_moment")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("DataId")
                        .HasName("PK__real_tim__F5A76B3BC73E5A4C");

                    b.HasIndex("CarId");

                    b.HasIndex("ChargingpointId");

                    b.ToTable("real_time_data", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.RefreshToken", b =>
                {
                    b.Property<int>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("token_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TokenId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires_at");

                    b.Property<bool?>("Revoked")
                        .HasColumnType("bit")
                        .HasColumnName("revoked");

                    b.Property<string>("Token")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("TokenId")
                        .HasName("PK__refresh___CB3C9E1740EDF086");

                    b.HasIndex("UserId");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId")
                        .HasName("PK__roles__760965CC7B4A4933");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.StationLocation", b =>
                {
                    b.Property<int>("StationLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("station_location_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StationLocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("latitude");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(9, 6)")
                        .HasColumnName("longitude");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("StationLocationId")
                        .HasName("PK__station___0CE32FE77AA08A18");

                    b.ToTable("station_location", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_at");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Fullname")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("fullname");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("phone_number");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("update_at");

                    b.HasKey("UserId")
                        .HasName("PK__users__B9BE370F75EF7C0F");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "PhoneNumber" }, "UQ__users__A1936A6B3D8FA6CF")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__users__AB6E616458702F6A")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.UserCar", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("car_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAllowedToCharge")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "CarId")
                        .HasName("PK__user_car__9D7797D4EF334824");

                    b.HasIndex("CarId");

                    b.ToTable("user_car", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Balance", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Balances")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__balance__user_id__01142BA1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.BalanceTransaction", b =>
                {
                    b.HasOne("DataAccess.Models.Balance", "Balance")
                        .WithMany("BalanceTransactions")
                        .HasForeignKey("BalanceId")
                        .IsRequired()
                        .HasConstraintName("FK__balance_t__balan__03F0984C");

                    b.Navigation("Balance");
                });

            modelBuilder.Entity("DataAccess.Models.Car", b =>
                {
                    b.HasOne("DataAccess.Models.CarModel", "CarModel")
                        .WithMany("Cars")
                        .HasForeignKey("CarModelId")
                        .IsRequired()
                        .HasConstraintName("FK__car__car_model_i__6B24EA82");

                    b.Navigation("CarModel");
                });

            modelBuilder.Entity("DataAccess.Models.Cccd", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Cccds")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__cccd__user_id__0F624AF8");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.ChargingPoint", b =>
                {
                    b.HasOne("DataAccess.Models.ChargingStation", "Station")
                        .WithMany("ChargingPoints")
                        .HasForeignKey("StationId")
                        .IsRequired()
                        .HasConstraintName("FK__charging___stati__6E01572D");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("DataAccess.Models.ChargingSession", b =>
                {
                    b.HasOne("DataAccess.Models.Car", "Car")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__charging___car_i__787EE5A0");

                    b.HasOne("DataAccess.Models.ChargingPoint", "ChargingPoint")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("ChargingPointId")
                        .IsRequired()
                        .HasConstraintName("FK__charging___charg__797309D9");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("ChargingSessions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__charging___user___7A672E12");

                    b.Navigation("Car");

                    b.Navigation("ChargingPoint");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.ChargingStation", b =>
                {
                    b.HasOne("DataAccess.Models.User", "Owner")
                        .WithMany("ChargingStations")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK__charging___owner__6754599E");

                    b.HasOne("DataAccess.Models.StationLocation", "StationLocation")
                        .WithMany("ChargingStations")
                        .HasForeignKey("StationLocationId")
                        .IsRequired()
                        .HasConstraintName("FK__charging___stati__68487DD7");

                    b.Navigation("Owner");

                    b.Navigation("StationLocation");
                });

            modelBuilder.Entity("DataAccess.Models.DocumentReview", b =>
                {
                    b.HasOne("DataAccess.Models.Car", "Car")
                        .WithMany("DocumentReviews")
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK__document___car_i__1AD3FDA4");

                    b.HasOne("DataAccess.Models.Cccd", "Cccd")
                        .WithMany("DocumentReviews")
                        .HasForeignKey("CccdId")
                        .HasConstraintName("FK__document___cccd___19DFD96B");

                    b.HasOne("DataAccess.Models.DriverLicense", "DriverLicense")
                        .WithMany("DocumentReviews")
                        .HasForeignKey("DriverLicenseId")
                        .HasConstraintName("FK__document___drive__1BC821DD");

                    b.HasOne("DataAccess.Models.User", "ReviewedByNavigation")
                        .WithMany("DocumentReviewReviewedByNavigations")
                        .HasForeignKey("ReviewedBy")
                        .HasConstraintName("FK__document___revie__1CBC4616");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("DocumentReviewUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__document___user___18EBB532");

                    b.Navigation("Car");

                    b.Navigation("Cccd");

                    b.Navigation("DriverLicense");

                    b.Navigation("ReviewedByNavigation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.DriverLicense", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("DriverLicenses")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__driver_li__user___123EB7A3");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.Feedback", b =>
                {
                    b.HasOne("DataAccess.Models.Car", "Car")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK__feedback__car_id__09A971A2");

                    b.HasOne("DataAccess.Models.ChargingPoint", "Point")
                        .WithMany("Feedbacks")
                        .HasForeignKey("PointId")
                        .HasConstraintName("FK__feedback__point___0B91BA14");

                    b.HasOne("DataAccess.Models.ChargingStation", "Station")
                        .WithMany("Feedbacks")
                        .HasForeignKey("StationId")
                        .HasConstraintName("FK__feedback__statio__0C85DE4D");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__feedback__user_i__0A9D95DB");

                    b.Navigation("Car");

                    b.Navigation("Point");

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.Payment", b =>
                {
                    b.HasOne("DataAccess.Models.ChargingSession", "Session")
                        .WithMany("Payments")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("FK__payment__session__7E37BEF6");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__payment__user_id__7D439ABD");

                    b.Navigation("Session");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.RealTimeDatum", b =>
                {
                    b.HasOne("DataAccess.Models.Car", "Car")
                        .WithMany("RealTimeData")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__real_time__car_i__74AE54BC");

                    b.HasOne("DataAccess.Models.ChargingPoint", "Chargingpoint")
                        .WithMany("RealTimeData")
                        .HasForeignKey("ChargingpointId")
                        .IsRequired()
                        .HasConstraintName("FK__real_time__charg__75A278F5");

                    b.Navigation("Car");

                    b.Navigation("Chargingpoint");
                });

            modelBuilder.Entity("DataAccess.Models.RefreshToken", b =>
                {
                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__refresh_t__user___06CD04F7");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.HasOne("DataAccess.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__users__role_id__6477ECF3");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Models.UserCar", b =>
                {
                    b.HasOne("DataAccess.Models.Car", "Car")
                        .WithMany("UserCars")
                        .HasForeignKey("CarId")
                        .IsRequired()
                        .HasConstraintName("FK__user_car__car_id__71D1E811");

                    b.HasOne("DataAccess.Models.User", "User")
                        .WithMany("UserCars")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__user_car__user_i__70DDC3D8");

                    b.Navigation("Car");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Models.Balance", b =>
                {
                    b.Navigation("BalanceTransactions");
                });

            modelBuilder.Entity("DataAccess.Models.Car", b =>
                {
                    b.Navigation("ChargingSessions");

                    b.Navigation("DocumentReviews");

                    b.Navigation("Feedbacks");

                    b.Navigation("RealTimeData");

                    b.Navigation("UserCars");
                });

            modelBuilder.Entity("DataAccess.Models.CarModel", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("DataAccess.Models.Cccd", b =>
                {
                    b.Navigation("DocumentReviews");
                });

            modelBuilder.Entity("DataAccess.Models.ChargingPoint", b =>
                {
                    b.Navigation("ChargingSessions");

                    b.Navigation("Feedbacks");

                    b.Navigation("RealTimeData");
                });

            modelBuilder.Entity("DataAccess.Models.ChargingSession", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DataAccess.Models.ChargingStation", b =>
                {
                    b.Navigation("ChargingPoints");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("DataAccess.Models.DriverLicense", b =>
                {
                    b.Navigation("DocumentReviews");
                });

            modelBuilder.Entity("DataAccess.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Models.StationLocation", b =>
                {
                    b.Navigation("ChargingStations");
                });

            modelBuilder.Entity("DataAccess.Models.User", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("Cccds");

                    b.Navigation("ChargingSessions");

                    b.Navigation("ChargingStations");

                    b.Navigation("DocumentReviewReviewedByNavigations");

                    b.Navigation("DocumentReviewUsers");

                    b.Navigation("DriverLicenses");

                    b.Navigation("Feedbacks");

                    b.Navigation("Payments");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserCars");
                });
#pragma warning restore 612, 618
        }
    }
}
