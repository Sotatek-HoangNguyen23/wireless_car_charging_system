@page
@model wireless_changing_system.Pages.Wireless_charging.Dashboard.UserModel
@{
}

<h4 class="mt-5">Thống kê người dùng</h4>

<div class="container mt-4">
    <div class="row mb-4">
        <div class="col-md-3">
            <label class="form-label">Từ ngày</label>
            <input type="date" id="startDate" class="form-control">
        </div>
        <div class="col-md-3">
            <label class="form-label">Đến ngày</label>
            <input type="date" id="endDate" class="form-control">
        </div>
    </div>

    <div class="row mb-4 text-center">
        <div class="col-md-3">
            <div class="p-3 bg-light border rounded shadow-sm">
                <h6>Tổng số người dùng</h6>
                <h5 id="totalUsers">--</h5>
            </div>
        </div>
        <div class="col-md-3">
            <div class="p-3 bg-light border rounded shadow-sm">
                <h6>Số người dùng mới</h6>
                <h5 id="newUsers">--</h5>
            </div>
        </div>
        <div class="col-md-3">
            <div class="p-3 bg-light border rounded shadow-sm">
                <h6>Số người dùng đã sạc</h6>
                <h5 id="activeUsers">--</h5>
            </div>
        </div>
        <div class="col-md-3">
            <div class="p-3 bg-light border rounded shadow-sm">
                <h6>Tỷ lệ DAU/MAU</h6>
                <h5 id="dauMauRatio">--</h5>
            </div>
        </div>
    </div>


    <div class="row mb-4">
        <div class="col-md-12">
            <h5 class="mb-3">Số người dùng mới theo thời gian</h5>
            <canvas id="newUsersChart"></canvas>
        </div>
        <div class="col-md-12 mt-4">
            <h5>Số người dùng đã đăng ký vs đã sạc</h5>
            <canvas id="userVsChargedChart"></canvas>
        </div>
        <div class="col-md-12 mt-4">
            <h5>Tỷ lệ DAU/MAU</h5>
            <canvas id="dauMauChart"></canvas>
        </div>
    </div>
</div>

<script type="module">
    import { fetchWithAuth } from '/js/apiClient.js';

    document.addEventListener("DOMContentLoaded", function () {
        const today = new Date();
        const defaultStart = new Date(today.getFullYear(), 0, 2);
        const defaultEnd = new Date(today.getFullYear(), 11, 32);

        $(document).ready(function () {
            $('#startDate').val(defaultStart.toISOString().slice(0, 10));
            $('#endDate').val(defaultEnd.toISOString().slice(0, 10));
            fetchUserStats(defaultStart.toISOString(), defaultEnd.toISOString());

            $('#startDate, #endDate').on('change', function () {
                const start = new Date($('#startDate').val());
                const end = new Date($('#endDate').val());
                if (start && end && start <= end) {
                    fetchUserStats(start.toISOString(), end.toISOString());
                }
            });
        });

        async function fetchUserStats(start, end) {
            try {
                const url = new URL("https://localhost:7191/api/Dashboard/user");
                url.searchParams.append("start", start);
                url.searchParams.append("end", end);

                const response = await fetchWithAuth(url.toString(), {
                    method: 'GET',
                    headers: {
                        "Content-Type": "application/json"
                    }
                });

                if (response.ok) {
                    const res = await response.json();
                    console.log(res);

                    // Cập nhật thông tin người dùng
                    $('#totalUsers').text(res.totalUsers);
                    $('#newUsers').text(res.newUsersOverTime.reduce((sum, d) => sum + d.count, 0));
                    $('#activeUsers').text(res.usersWhoCharged);
                    $('#dauMauRatio').text(`${res.daumauPercentage}%`);

                    // Render chart
                    renderChart('newUsersChart', res.newUsersOverTime.map(d => d.date), res.newUsersOverTime.map(d => d.count), 'line', 'Số người dùng mới', 'blue', chart => { });
                    renderChart('userVsChargedChart', ['Đăng ký', 'Đã sạc'], [res.totalUsers, res.usersWhoCharged], 'bar', 'Số người dùng', 'green', chart => { });
                    renderPieChart('dauMauChart', ['DAU', 'MAU'], [res.dau, res.mau], chart => { });
                } else {
                    console.error("Lỗi khi lấy dữ liệu người dùng:", response.statusText);
                }
            } catch (error) {
                console.error("Lỗi khi lấy dữ liệu người dùng:", error);
            }
        }


        function renderChart(id, labels, data, type, label, color, storeChart) {
            if (window[id] && typeof window[id].destroy === 'function') {
                window[id].destroy();
            }

            const ctx = document.getElementById(id).getContext('2d');
            const options = {
                plugins: {
                    datalabels: {
                        anchor: 'end',
                        align: 'start',
                        color: 'black',
                        font: {
                            weight: 'bold'
                        },
                        formatter: function (value) {
                            return value;
                        }
                    }
                }
            };

            window[id] = new Chart(ctx, {
                type,
                data: {
                    labels,
                    datasets: [{
                        label,
                        data,
                        borderColor: color,
                        backgroundColor: color,
                        fill: type === 'line' ? false : true
                    }]
                },
                options: options,
                plugins: [ChartDataLabels]
            });
            storeChart(window[id]);
        }

        function renderPieChart(id, labels, data, storeChart) {
            if (window[id] && typeof window[id].destroy === 'function') {
                window[id].destroy();
            }
            const ctx = document.getElementById(id).getContext('2d');
            window[id] = new Chart(ctx, {
                type: 'pie',
                data: {
                    labels,
                    datasets: [{
                        data,
                        backgroundColor: ['#FF5733', '#33FF57'],
                    }]
                }
            });
            storeChart(window[id]);
        }
    });
</script>
