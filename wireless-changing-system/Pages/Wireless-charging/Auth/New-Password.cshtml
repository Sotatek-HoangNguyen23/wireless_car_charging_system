@page
@model wireless_changing_system.Pages.Wireless_charging.Auth.New_PasswordModel
@{
}
<style>
    input[type="password"]::-ms-reveal,
    input[type="password"]::-ms-clear {
        display: none;
    }
</style>
<div class="container">
    <div class="new-password-card shadow-sm">
        <div class="card-body">
            <h4 class="fw-bold mb-3">Chọn mật khẩu mới</h4>

            <p>
                Tạo mật khẩu mới có ít nhất 8 ký tự.
                Mật khẩu mạnh cần kết hợp chữ cái viết hoa,
                chữ số và ký tự đặc biệt.
            </p>

            <div class="mb-3 position-relative">
                <label for="passwordInput" class="form-label visually-hidden">Mật khẩu</label>
                <input type="password"
                       class="form-control pe-5"
                       id="passwordInput"
                       placeholder="Nhập mật khẩu mới" />
                <i class="bi bi-eye-slash toggle-password"
                   style="position: absolute; right: 15px; top: 50%; transform: translateY(-50%); cursor: pointer;"></i>
            </div>

            <div id="password-rules-wrapper" style="display: none;">
                <ul id="password-rules" class="password-rules-list">
                    <li id="rule-length"><i class="bi bi-x-circle rule-icon"></i> Ít nhất 6 ký tự</li>
                    <li id="rule-uppercase"><i class="bi bi-x-circle rule-icon"></i> Ít nhất 1 chữ hoa</li>
                    <li id="rule-number"><i class="bi bi-x-circle rule-icon"></i> Ít nhất 1 chữ số</li>
                    <li id="rule-special"><i class="bi bi-x-circle rule-icon"></i> Ít nhất 1 ký tự đặc biệt</li>
                </ul>
            </div>

            <div class="text-center mt-4">
                <button type="button" class="btn btn-primary" id="continueResetBtn">Tiếp tục</button>
            </div>
        </div>
    </div>
</div>

<div id="error-toast" class="custom-toast">
    <div class="toast-progress"></div>
    <i class="bi bi-exclamation-circle-fill toast-icon"></i>
    <div class="toast-content">
        <strong>Lỗi!</strong>
        <p class="mb-0"></p>
    </div>
</div>
<div id="success-toast" class="custom-toast success-toast">
    <div class="toast-progress"></div>
    <i class="bi bi-check-circle-fill toast-icon"></i>
    <div class="toast-content">
        <strong>Thành công!</strong>
        <p class="mb-0"></p>
    </div>
</div>
<script>
    const continueBtn = document.getElementById('continueResetBtn');
    continueBtn.disabled = true;
        // Hiển thị hoặc ẩn mật khẩu
    document.querySelector('.toggle-password').addEventListener('click', function(e) {
        const passwordInput = document.getElementById('passwordInput');
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);

        this.classList.toggle('bi-eye-slash');
        this.classList.toggle('bi-eye');
    });
    // Kiểm tra mật khẩu
    document.getElementById('passwordInput').addEventListener('input', function(e) {
        const password = e.target.value;
        const rulesWrapper = document.getElementById('password-rules-wrapper');

        rulesWrapper.style.display = password.length > 0 ? 'block' : 'none';

        const isLengthValid = password.length >= 6;
        const hasUppercase = /[A-Z]/.test(password);
        const hasNumber = /\d/.test(password);
        const hasSpecial = /[!@@#$%^&*(),.?":{}|<>]/.test(password);

        updateRule('rule-length', isLengthValid);
        updateRule('rule-uppercase', hasUppercase);
        updateRule('rule-number', hasNumber);
        updateRule('rule-special', hasSpecial);

        continueBtn.disabled = !(isLengthValid && hasUppercase && hasNumber && hasSpecial);
    });

    // Cập nhật trạng thái của quy tắc mật khẩu
       function updateRule(ruleId, isValid) {
        const ruleElement = document.getElementById(ruleId);
        const icon = ruleElement.querySelector('.rule-icon');

        if (isValid) {
            icon.classList.remove('bi-x-circle');
            icon.classList.add('bi-check-circle');
            ruleElement.classList.add('valid');
        } else {
            icon.classList.remove('bi-check-circle');
            icon.classList.add('bi-x-circle');
            ruleElement.classList.remove('valid');
        }
    }

     continueBtn.addEventListener('click', async function() {
        const password = document.getElementById('passwordInput').value;
        const btn = this;
        const originalText = btn.innerHTML;

        // Lấy thông tin từ URL
        const email = '@Model.Email';
        const token = '@Model.Token';

        if (!email || !token) {
            showToast('Thiếu thông tin xác thực');
            return;
        }

        try {
            // Thêm trạng thái loading
            btn.disabled = true;
            btn.innerHTML = `<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Processing...`;

            const response = await fetch('https://localhost:7191/api/otp/reset-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: email,
                    token: token,
                    newPassword: password
                })
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.detail || 'Đổi mật khẩu thất bại');
            }

            showSuccessToast('Đổi mật khẩu thành công! Đang chuyển hướng...');
            setTimeout(() => {
                window.location.href = '/wireless-charging/auth'; 
            }, 2000);

        } catch (error) {
            showToast(error.message);
        } finally {
            btn.disabled = false;
            btn.innerHTML = originalText;
        }
    });
     function showSuccessToast(message) {
        const toast = document.getElementById('success-toast');
        toast.querySelector('.toast-content p').textContent = message;
        toast.classList.add('show');
        setTimeout(() => toast.classList.remove('show'), 5000);
    }
    function showToast(message) {
        const toast = document.getElementById('error-toast');
        toast.querySelector('.toast-content p').textContent = message;
        toast.classList.add('show');
        setTimeout(() => toast.classList.remove('show'), 5000);
    }
</script>
