@page
@model wireless_changing_system.Pages.Wireless_charging.Vehicles.ChargingHistoryModel
@{
}

<div class="container py-4">
    <h1 class="mb-4">Lịch sử sạc & Thống kê xe</h1>

    <div class="row">
        <!-- Cột trái: Lịch sử sạc -->
        <div class="col-md-6 mb-4">
            <div class="mb-3">
                <h3>VF 9 ECO</h3>
                <p class="text-muted">Biển số: 30E-777.96</p>
            </div>

            <div class="mb-3">
                <h5><i class="bi bi-calendar-event"></i> Khoảng thời gian</h5>
                <div class="d-flex gap-2">
                    <input type="date" id="startDate" class="form-control" style="max-width: 180px;" />
                    <input type="date" id="endDate" class="form-control" style="max-width: 180px;" />
                </div>
            </div>

            <div class="mb-3">
                <h5><i class="bi bi-ev-station"></i> Trạm</h5>
                <select class="form-select" id="stationSelect">
                    <option selected>Chọn một trạm</option>
                </select>
            </div>

            <div class="list-group" id="chargingHistoryList"></div>
        </div>

        <!-- Cột phải: Thống kê xe theo tháng -->
        <div class="col-md-6">
            <div class="mb-4">
                <h4><i class="bi bi-bar-chart-line"></i> Thống kê sạc theo tháng (năm <span id="currentYear"></span>)</h4>

                <div class="mb-3">
                    <select class="form-select" id="chartTypeSelect">
                        <option value="session">Số lượt sạc</option>
                        <option value="cost">Tổng tiền sạc (VND)</option>
                        <option value="energy">Tổng công suất (kWh)</option>
                        <option value="totalTime">Tổng thời gian sạc (phút)</option>
                        <option value="avgTime">Thời gian trung bình (phút)</option>
                    </select>
                </div>

                <canvas id="mainChart" height="300" class="mb-3"></canvas>
                <p id="chartDescription" class="fs-5 text-center"></p>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script type="module">
    import { fetchWithAuth } from '/js/apiClient.js';

    let mainChartInstance;
    let fullHistoryData = [];
    let currentPage = 1;
    const itemsPerPage = 5;

    document.addEventListener("DOMContentLoaded", async () => {
        const carId = getCarIdFromUrl();
        const year = new Date().getFullYear();
        document.getElementById("currentYear").textContent = year;

        await fetchChargingHistory(carId);
        const statsData = await fetchMonthlyStats(carId, year);
        renderChart("session", statsData);

        document.getElementById("chartTypeSelect").addEventListener("change", (e) => {
            renderChart(e.target.value, statsData);
        });

        document.getElementById("startDate").addEventListener("change", () => filterChargingHistory(carId));
        document.getElementById("endDate").addEventListener("change", () => filterChargingHistory(carId));
        document.getElementById("stationSelect").addEventListener("change", () => filterChargingHistory(carId));

        // Load stations
        const response = await fetch('https://localhost:7191/api/ChargingStation');
        const data = await response.json();
        const selectElement = document.getElementById('stationSelect');
        data.data.forEach(station => {
            const option = document.createElement('option');
            option.value = station.stationId;
            option.textContent = station.stationName;
            selectElement.appendChild(option);
        });
    });

    function getCarIdFromUrl() {
        const urlParams = new URLSearchParams(window.location.search);
        return urlParams.get("carId");
    }

    async function fetchChargingHistory(carId) {
        try {
            const res = await fetchWithAuth(`https://localhost:7191/api/Car/charging-history?carId=${carId}`);
            const data = await res.json();
            displayChargingHistory(data);
        } catch (err) {
            displayNotFound();
        }
    }

    function displayNotFound() {
        document.getElementById("chargingHistoryList").innerHTML = `<div class="fs-5">Không có lịch sử sạc <i class="bi bi-emoji-frown"></i></div>`;
    }

    function displayChargingHistory(history) {
        fullHistoryData = history;
        currentPage = 1;
        renderCurrentPage();
    }

    function renderCurrentPage() {
        const container = document.getElementById("chargingHistoryList");
        container.innerHTML = "";

        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = startIndex + itemsPerPage;
        const currentItems = fullHistoryData.slice(startIndex, endIndex);

        if (currentItems.length === 0) {
            container.innerHTML = `<p class="text-muted">Không có lịch sử sạc.</p>`;
            return;
        }

        currentItems.forEach(session => {
            const html = `
                <div class="list-group-item mb-2 shadow-sm">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6>${formatTime(session.startTime)} - ${session.endTime ? formatTime(session.endTime) : "Đang sạc..."}</h6>
                            <p class="mb-0">Số tiền: ${session.cost}VND</p>
                            <p class="mb-0"><i class="bi bi-geo-alt"></i> ${session.stationName}, ${session.address}</p>
                        </div>
                        <span class="badge ${session.status === "Done" ? "bg-success" : "bg-primary"}">${session.status}</span>
                    </div>
                </div>`;
            container.insertAdjacentHTML("beforeend", html);
        });

        renderPaginationControls();
    }

    function renderPaginationControls() {
        const container = document.getElementById("chargingHistoryList");
        const totalPages = Math.ceil(fullHistoryData.length / itemsPerPage);

        if (totalPages <= 1) return;

        const pagination = document.createElement("div");
        pagination.classList.add("d-flex", "justify-content-center", "mt-3", "gap-2");

        const prevBtn = `<button class="btn btn-outline-primary btn-sm" ${currentPage === 1 ? "disabled" : ""} onclick="changePage(${currentPage - 1})">Trước</button>`;
        const nextBtn = `<button class="btn btn-outline-primary btn-sm" ${currentPage === totalPages ? "disabled" : ""} onclick="changePage(${currentPage + 1})">Sau</button>`;

        pagination.innerHTML = prevBtn + `<span class="align-self-center px-2">Trang ${currentPage}/${totalPages}</span>` + nextBtn;
        container.appendChild(pagination);
    }

    window.changePage = function (page) {
        currentPage = page;
        renderCurrentPage();
    };

    function formatTime(dateStr) {
        const date = new Date(dateStr);
        return date.toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" }) + " " + date.toLocaleDateString();
    }

    async function filterChargingHistory(carId) {
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;
        const stationId = document.getElementById("stationSelect").value;

        let url = `https://localhost:7191/api/Car/charging-history?carId=${carId}`;
        if (startDate) url += `&start=${startDate}`;
        if (endDate) url += `&end=${endDate}`;
        if (stationId && stationId !== "Chọn một trạm") url += `&chargingStationId=${stationId}`;

        try {
            const res = await fetchWithAuth(url);
            const data = await res.json();
            displayChargingHistory(data);
        } catch {
            displayNotFound();
        }
    }

    async function fetchMonthlyStats(carId, year) {
        const res = await fetchWithAuth(`https://localhost:7191/api/Car/${carId}/stats?year=${year}`);
        return await res.json();
    }

    function renderChart(type, data) {
        const months = data.map(d => `Tháng ${d.month}`);
        const config = {
            session: {
                label: "Số lượt sạc",
                color: "#4e73df",
                values: data.map(d => d.sessionCount),
                description: "Tổng số lượt sạc xe theo từng tháng."
            },
            cost: {
                label: "Tổng tiền sạc ($)",
                color: "#1cc88a",
                values: data.map(d => d.totalCost),
                description: "Tổng số tiền đã thanh toán cho sạc xe mỗi tháng."
            },
            energy: {
                label: "Tổng công suất (kWh)",
                color: "#36b9cc",
                values: data.map(d => d.totalEnergy),
                description: "Tổng năng lượng tiêu thụ để sạc xe trong mỗi tháng."
            },
            totalTime: {
                label: "Tổng thời gian sạc (phút)",
                color: "#f6c23e",
                values: data.map(d => d.totalTime),
                description: "Tổng thời gian đã sạc xe trong mỗi tháng."
            },
            avgTime: {
                label: "Thời gian trung bình (phút)",
                color: "#e74a3b",
                values: data.map(d => d.averageTime),
                description: "Thời gian trung bình mỗi lần sạc trong tháng."
            }
        }[type];

        if (mainChartInstance) mainChartInstance.destroy();

        const ctx = document.getElementById("mainChart").getContext("2d");
        mainChartInstance = new Chart(ctx, {
            type: "bar",
            data: {
                labels: months,
                datasets: [{
                    label: config.label,
                    data: config.values,
                    backgroundColor: config.color,
                    borderRadius: 6
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { display: false }
                },
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        document.getElementById("chartDescription").innerText = config.description;
    }
</script>
