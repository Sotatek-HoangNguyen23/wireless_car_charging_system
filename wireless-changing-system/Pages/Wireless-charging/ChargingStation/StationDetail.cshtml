@page
@model wireless_changing_system.Pages.Wireless_charging.ChargingStation.StationDetailModel
@{
}

<div class="container">
    <h3 class="col-md-6"></h3>

    <!-- Header với ảnh và thông tin trạm sạc -->
    <div class="station-header d-flex align-items-center mb-4">
        <img src="https://img.canarymedia.com/content/uploads/witricity3.png?auto=compress%2Cformat&crop=focalpoint&fit=crop&fp-x=0.5&fp-y=0.5&h=501&q=80&w=864&s=8fb2e832892760cff6912e6683a67514" alt="Station Image" class="img-fluid rounded me-4" style="width: 500px; height: 300px;">
        <div class="station-info flex-grow-1">
            
        </div>
    </div>

    <!-- Charging Points -->
    <div class="charging-points">
        <div class="row mb-3">
            <h3 class="col-md-4">Các điểm sạc của trạm</h3>
            <button id="add-point-btn" type="button" class="btn btn-primary col-md-3" data-bs-toggle="modal" data-bs-target="#addPointModal">
                Thêm điểm sạc
            </button>
        </div>
        <div class="row point-list mb-4">
            
        </div>
    </div>

    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center"></ul>
    </nav>
</div>

<!-- Modal Xác Nhận Xóa Station -->
<div class="modal fade" id="deleteStationConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmLabel">Xác nhận xóa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Bạn có chắc chắn muốn xóa trạm sạc này không?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteStationBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Xác Nhận Xóa Point-->
<div class="modal fade" id="deletePointConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmLabel">Xác nhận xóa</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                Bạn có chắc chắn muốn xóa điểm sạc này không?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
                <button type="button" class="btn btn-danger" id="confirmDeletePointBtn">Xóa</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Add -->
<div class="modal fade" id="addPointModal" tabindex="-1" aria-labelledby="addPointModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addPointModalLabel">Thêm điểm sạc</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label for="totalPoint" class="form-label">Tổng số điểm sạc</label>
                            <input type="number" class="form-control" id="totalPoint">
                        </div>
                        <div class="col-md-4">
                            <label for="codeName" class="form-label">Mã điểm sạc</label>
                            <input type="text" class="form-control" id="codeName">
                        </div>                           
                        <div class="col-md-4">
                            <label for="maxPower" class="form-label">Công suất tối đa</label>
                            <input type="number" class="form-control" id="maxPower">
                        </div>
                        <p class="form-note">Tên điểm sạc sẽ có dạng: Mã điểm sạc + số thứ tự (VD: P-1, P2,...)</p>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="description" class="form-label">Mô tả</label>
                            <textarea class="form-control" id="description" rows="3" placeholder="Mô tả"></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" id="btn-add">Thêm</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Update -->
<div class="modal fade" id="updatePointModal" tabindex="-1" aria-labelledby="updatePointModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updatePointModalLabel">Cập nhật điểm sạc</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="pointName" class="form-label">Tên điểm sạc</label>
                            <input type="text" class="form-control" id="updatePointName">
                        </div>
                        <div class="col-md-6">
                            <label for="maxPower" class="form-label">Công suất tối đa</label>
                            <input type="number" class="form-control" id="updateMaxPower">
                        </div>                            
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="updateStatus" class="form-label">Trạng thái</label>
                            <select class="form-select" id="updateStatus">
                                <option value="Available">Sẵn sàng </option>
                                <option value="Maintenance">Bảo trì </option>
                            </select>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-12">
                            <label for="description" class="form-label">Mô tả</label>
                            <textarea class="form-control" id="updateDescription" rows="3"></textarea>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                <button type="button" class="btn btn-primary" id="btn-update">Cập nhật</button>
            </div>
        </div>
    </div>
</div>

<script type="module">
    import { fetchWithAuth } from '/js/apiClient.js';
    document.addEventListener("DOMContentLoaded", function () {
        let currentPage = 1;
        let data;
        const pageSize = 3;
        const role = sessionStorage.getItem("role");
        const urlParams = new URLSearchParams(window.location.search);
        var stationId = urlParams.get('stationId');

        $(document).ready(function () {
            loadStationData(stationId, currentPage, pageSize);

            let stationIdToDelete = null; // Lưu ID trạm sạc cần xóa
            let pointIdToDelete = null;

            // Khi click vào nút Delete, mở modal và lưu ID
            $(document).on("click", ".btn-delete-station", function (e) {
                e.preventDefault();
                stationIdToDelete = $(this).data("id");
                $("#deleteStationConfirmModal").modal("show");
            });

            $(document).on("click", ".btn-delete-point", function (e) {
                e.preventDefault();
                pointIdToDelete = $(this).data("id");
                $("#deletePointConfirmModal").modal("show");
            });

            // Khi nhấn xác nhận xóa
            $("#confirmDeleteStationBtn").click(function () {
                if (!stationIdToDelete) {
                    showToast("Không tìm thấy trạm sạc!");
                    return;
                }

                deleteStation(stationIdToDelete);
            });

            $("#confirmDeletePointBtn").click(function () {
                if (!pointIdToDelete) {
                    showToast("Point not found!");
                    return;
                }

                deletePoint(pointIdToDelete);
            });

            let pointIdToUpdate = null;

            // Khi nhấn vào nút cập nhật
            $(document).on("click", ".btn-update-point", function (e) {
                e.preventDefault();
                pointIdToUpdate = $(this).data("id");
                $("#updatePointModal").modal("show");
            });

            $("#updatePointModal").on("show.bs.modal", function () {

                if (!pointIdToUpdate) {
                    console.error("Không có ID của điểm sạc để cập nhật.");
                    showToast("Không tìm thấy điểm sạc.");
                    return;
                }

                loadChargingPointToUpdate(pointIdToUpdate);
            });

            $("#btn-update").click(function () {
                const maxPowerValue = $("#updateMaxPower").val();

                const updatePointDto = {
                    chargingPointName: $("#updatePointName").val(),
                    description: $("#updateDescription").val(),
                    status: $("#updateStatus").val(),
                    maxPower: maxPowerValue ? parseFloat(maxPowerValue) : 0
                };

                updateChargingPoint(pointIdToUpdate, updatePointDto);
            });

            // Add Point
            $("#btn-add").click(function () {
                const urlParams = new URLSearchParams(window.location.search);
                stationId = urlParams.get('stationId');
                const pointDto = {
                    totalPoint: parseInt($("#totalPoint").val()),
                    pointCode: $("#codeName").val(),
                    pointName: $("#pointName").val(),
                    pointDescription: $("#description").val(),
                    maxPower: parseFloat($("#maxPower").val())
                };

                addChargingPoint(stationId, pointDto);
            });
        }); 

        // Gọi API lấy thông tin trạm sạc
        async function loadStationData(stationId, currentPage, pageSize) {
            try {
                const url = `https://localhost:7191/api/ChargingStation/Detail/${stationId}?page=${currentPage}&pageSize=${pageSize}`;
                const options = {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                };

                const response = await fetchWithAuth(url, options);
                if (response.ok) {
                    data = await response.json();
                    console.log("API Response:", data);
                    updateStationInfo(data);
                    updateStationPointInfo(data);
                    updatePagination(data.points.totalPages);
                } else {
                    const errorText = await response.text();
                    console.error("Server Error:", errorText);
                    showToast("Không thể tải dữ liệu trạm sạc.");
                }
            } catch (error) {
                console.error("Fetch error:", error);
                showToast("Không thể tải dữ liệu trạm sạc.");
            }
        }

        // Hàm cập nhật thông tin trạm sạc vào HTML
        function updateStationInfo(data) {
            if (!data || !data.station) return;

            let station = data.station;

            // Cập nhật thông tin trạm sạc
            $(".station-info").html
            (`
                <h1>${station.stationName}</h1>
                <p><strong>Chủ sở hữu:</strong> ${station.owner}</p>
                <p><strong>Tổng số điểm sạc:</strong> ${station.totalPoint}</p>
                <p><strong>Số điểm sạc còn trống:</strong> ${station.availablePoint}</p>
                <p><strong>Địa chỉ:</strong> ${station.address}</p>
                <p><strong>Trạng thái:</strong> ${station.status}</p>
                <button class="btn btn-warning btn-sm show-on-map" data-lat="${station.latitude}" data-lng="${station.longitude}">
                Xem trên Google Map
                </button>              
                ${role === "Operator" || role === "Station Owner" ? `
                    <a class="btn btn-info btn-sm" href="updatestation?stationId=${station.stationId}">Cập nhật</a>
                    <a href="#" class="btn btn-danger btn-sm btn-delete-station" data-id="${station.stationId}"">Xóa</a>
                ` : ""}
            `);

            // Gán sự kiện click cho nút "Show on Map"
            $(".show-on-map").click(function () {
                const lat = $(this).data("lat");
                const lng = $(this).data("lng");
                openGoogleMaps(lat, lng);
            });
        }

        // Mở GGMap
        function openGoogleMaps(lat, lng) {
            const googleMapsUrl = `https://www.google.com/maps?q=${lat},${lng}`;
            window.open(googleMapsUrl, "_blank"); // Mở Google Maps trong tab mới
        }

        // Cập nhật danh sách điểm sạc
        function updateStationPointInfo(data) {
            if (!data || !data.station) return;

            let points = data.points.data

            let pointHTML = '';
            points.forEach(point => {
                let statusClass = getStatusClass(point.status);

                    pointHTML += `
                        <div class="col-md-4 mb-3">
                            <div class="card">
                                <div class="card-body">
                                    <h5 class="card-title">${point.chargingPointName}</h5>
                                    <p class="card-text">
                                        <strong>Trạng thái:</strong> 
                                        ${point.status === 'Available' ? 'Trống' : point.status === 'In Used' ? 'Đang sử dụng' : point.status === 'Maintenance' ? 'Bảo trì' : 'Không xác định'}
                                        <span class="status-dot ${getStatusClass(point.status)}"></span>
                                    </p>
                                    <p class="card-text"><strong>Công suất tối đa:</strong> ${point.maxPower}kW</p>
                                    <p class="card-text"><strong>Mô tả:</strong> ${point.description}</p>

                                    ${role === "Operator" || role === "Station Owner"
                                        ? `
                                            <a class="btn btn-info btn-sm btn-update-point" href="#" data-id="${point.chargingPointId}">Cập nhật</a>
                                            <a class="btn btn-danger btn-sm btn-delete-point" href="#" data-id="${point.chargingPointId}">Xóa</a>
                                            `
                                        : ""
                                    }
                                </div>
                            </div>
                        </div>
                    `;                            
            });

            $(".charging-points .point-list").html(pointHTML);
        }

        // Hàm đổi màu trạng thái
        function getStatusClass(status) {
            switch (status.toLowerCase()) {
                case "available":
                    return "bg-success";  // Xanh lá
                case "in used":
                    return "bg-danger";     // Đỏ
                case "maintenance":
                    return "bg-warning"; // Vàng
                default:
                    return "";
            }
        }

        // Phân trang
        function updatePagination(totalPages) {
            const pagination = $(".pagination");
            pagination.empty();

            function createPageItem(page, text = page, isActive = false, isDisabled = false) {
                return `<li class="page-item ${isActive ? 'active' : ''} ${isDisabled ? 'disabled' : ''}">
                            <a class="page-link" href="#" onclick="changePage(${page})">${text}</a>
                        </li>`;
            }

            // Nút "Trước"
            pagination.append(createPageItem(currentPage - 1, "Trước", false, currentPage === 1));

            const range = 2; // số trang trước/sau hiện tại sẽ hiển thị
            const startPage = Math.max(2, currentPage - range);
            const endPage = Math.min(totalPages - 1, currentPage + range);

            // Trang đầu tiên luôn hiển thị
            pagination.append(createPageItem(1, "1", currentPage === 1));

            // Dấu ...
            if (startPage > 2) {
                pagination.append(`<li class="page-item disabled"><span class="page-link">...</span></li>`);
            }

            // Các trang quanh currentPage
            for (let i = startPage; i <= endPage; i++) {
                pagination.append(createPageItem(i, i, currentPage === i));
            }

            // Dấu ...
            if (endPage < totalPages - 1) {
                pagination.append(`<li class="page-item disabled"><span class="page-link">...</span></li>`);
            }

            // Trang cuối cùng luôn hiển thị
            if (totalPages > 1) {
                pagination.append(createPageItem(totalPages, totalPages, currentPage === totalPages));
            }

            // Nút "Sau"
            pagination.append(createPageItem(currentPage + 1, "Sau", false, currentPage === totalPages));
        }
    
        // Chuyển trang
        window.changePage = function (page) {
            if (page < 1) return;

            currentPage = page;

            loadStationPoints(stationId, currentPage, pageSize);
        }

        // Thông tin điểm sạc
        async function loadStationPoints(stationId, currentPage, pageSize) {
            try {
                const url = `https://localhost:7191/api/ChargingStation/Detail/${stationId}?page=${currentPage}&pageSize=${pageSize}`;
                const options = {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                };

                const response = await fetchWithAuth(url, options);
                if (response.ok) {
                    const data = await response.json();
                    updateStationPointInfo(data); // Cập nhật danh sách Point mới
                    updatePagination(data.points.totalPages); // Cập nhật lại phân trang
                } else {
                    const errorText = await response.text();
                    console.error("Server Error:", errorText);
                }
            } catch (error) {
                console.error("Fetch error:", error);
            }
        }

        // Xóa trạm
        async function deleteStation(stationIdToDelete) {
            try {
                const url = `https://localhost:7191/api/ChargingStation/${stationIdToDelete}`;
                const options = {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                };

                const response = await fetchWithAuth(url, options);
                if (response.ok) {
                    $("#deleteConfirmModal").modal("hide"); // Đóng modal
                    showSuccessToast("Xóa trạm sạc thành công!");
                    setTimeout(function () {
                        window.location.href = "/wireless-charging/chargingstation/stationlist";
                    }, 1000);
                } else {
                    const errorText = await response.text();
                    console.error("Server Error:", errorText);
                    showToast("Xóa không thành công!");
                }
            } catch (error) {
                console.error("Fetch error:", error);
                showToast("Xóa không thành công!");
            }
        }

        // Xóa điểm sạc
        async function deletePoint(pointIdToDelete) {
            try {
                const url = `https://localhost:7191/api/ChargingPoint/${pointIdToDelete}`;
                const options = {
                    method: 'DELETE',
                    headers: { 'Content-Type': 'application/json' }
                };

                const response = await fetchWithAuth(url, options);
                if (response.ok) {
                    $("#deletePointConfirmModal").modal("hide");
                    showSuccessToast("Xóa điểm sạc thành công!");
                    const urlParams = new URLSearchParams(window.location.search);
                    const stationId = urlParams.get('stationId');
                    loadStationData(stationId, currentPage, pageSize);
                } else {
                    const errorText = await response.text();
                    console.error("Server Error:", errorText);
                    showToast("Xóa không thành công!");
                }
            } catch (error) {
                console.error("Fetch error:", error);
                showToast("Xóa không thành công!");
            }
        }

        // Loaad form update điểm sạc
        async function loadChargingPointToUpdate(pointIdToUpdate) {
            try {
                const url = `https://localhost:7191/api/ChargingPoint/${pointIdToUpdate}`;
                const options = {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' }
                };

                const response = await fetchWithAuth(url, options);
                if (response.ok) {
                    const data = await response.json();
                    console.log("Dữ liệu API trả về:", data);

                    if (data) {
                        $("#updatePointName").val(data.chargingPointName || "");
                        $("#updateMaxPower").val(data.maxPower || "");
                        $("#updateDescription").val(data.description || "");
                        $("#updateStatus").val(data.status || "");
                    } else {
                        console.warn("Dữ liệu trả về không hợp lệ.");
                    }
                } else {
                    const errorText = await response.text();
                    console.error("Server Error:", errorText);
                    showToast("Không thể lấy dữ liệu điểm sạc.");
                }
            } catch (error) {
                console.error("Fetch error:", error);
                showToast("Không thể lấy dữ liệu điểm sạc.");
            }
        }

        // Update điểm sạc
        async function updateChargingPoint(pointIdToUpdate, updatePointDto) {
            try {
                const url = `https://localhost:7191/api/ChargingPoint/${pointIdToUpdate}`;
                const options = {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(updatePointDto)
                };

                const response = await fetchWithAuth(url, options);
                if (response.ok) {
                    const data = await response.json();
                    console.log("Cập nhật thành công:", data);
                    showSuccessToast("Cập nhật điểm sạc thành công!");
                    $("#updatePointModal").modal("hide");
                    setTimeout(() => {
                        location.reload(); // Làm mới danh sách
                    }, 1000);
                } else {
                    const errorText = await response.text();
                    console.error("Lỗi từ server:", errorText);
                    showToast("Cập nhật điểm sạc thất bại!");
                }
            } catch (error) {
                console.error("Fetch error:", error);
                showToast("Cập nhật điểm sạc thất bại!");
            }
        }

        // Add điểm sạc
        async function addChargingPoint(stationId, pointDto) {
            try {
                const url = `https://localhost:7191/api/ChargingPoint/AddPoints?stationId=${stationId}`;
                const options = {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(pointDto)
                };

                const response = await fetchWithAuth(url, options);
                if (response.ok) {
                    const data = await response.json();
                    $("#addPointModal").modal("hide");
                    showSuccessToast("Thêm điểm sạc thành công!");
                    setTimeout(() => {
                        location.reload(); // Làm mới danh sách
                    }, 1000);
                } else {
                    const errorText = await response.text();
                    console.error("Lỗi khi thêm điểm sạc:", errorText);
                    showToast("Thêm điểm sạc thất bại!");
                }
            } catch (error) {
                console.error("Fetch error:", error);
                showToast("Thêm điểm sạc thất bại!");
            }
        }


        // Phân quyền theo role
        if (role !== "Operator" && role !== "Station Owner") {
            const addButton = document.getElementById("add-point-btn");
            addButton.style.display = "none";
        }
    });
</script>

<style>
    .status-dot {
        display: inline-block;
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 5px;
    }
</style>