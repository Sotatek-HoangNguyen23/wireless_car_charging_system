@page
@model wireless_changing_system.Pages.Wireless_charging.Payment.DepositMoneyModel
@{
    ViewData["Title"] = "Nạp tiền";
}

<div class="container mt-5">
    <div class="row justify-content-center mb-2">
        <h3>Nạp tiền</h3>
        <div>Số dư tài khoản: ... VNĐ</div>
        <input type="number" id="txtThanhTien" class="form-control" style="width: 400px"
               placeholder="Nhập số tiền bạn muốn nạp (VNĐ)">
    </div>
    <button class="btn btn-primary" onclick="taoLinkThanhToan()">Tạo QR thanh toán</button>
    <h3 id="paymentStatus" style="color: green; display: none;"></h3>
</div>

<script>
    async function taoLinkThanhToan() {
        const thanhtien = parseInt(document.getElementById("txtThanhTien").value);
        if (!thanhtien || thanhtien <= 0) {
            alert("Vui lòng nhập số tiền hợp lệ!");
            return;
        }

        const randomOrderId = Math.floor(Math.random() * 9999) + 1;
        const data = {
            name: "Nap tien tai khoan",
            quantity: 1,
            price: thanhtien,
            orderId: randomOrderId,
            totalPrice: thanhtien,
            description: "Nap tien vao tai khoan"
        };

        try {
            const response = await fetch("https://localhost:7191/api/Payment/create", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(data)
            });

            const result = await response.json();
            if (result.checkoutUrl) {
                window.open(result.checkoutUrl, "_blank");
                setTimeout(() => checkPaymentStatus(randomOrderId), 5000);
            }
        } catch (error) {
            console.error("Lỗi khi tạo link thanh toán", error);
        }
    }

        async function checkPaymentStatus(orderId, retryCount = 0) {
        try {
            const response = await fetch(`https://localhost:7191/api/Payment/status/${orderId}`, {
                method: "GET",
                headers: { "Content-Type": "application/json" }
            });

            const data = await response.json();
            const statusElement = document.getElementById("paymentStatus");
            statusElement.style.display = "block";

            if (data.status === "PAID") {
                statusElement.innerText = "Thanh toán thành công!";
                return;
            } else if (data.status === "CANCELLED" || data.status === "FAILED") {
                statusElement.innerText = "Thanh toán thất bại!";
                return;
            } else {
                if (retryCount < 60) {
                    setTimeout(() => checkPaymentStatus(orderId, retryCount + 1), 5000);
                } else {
                    statusElement.innerText = "Hết thời gian chờ thanh toán!";
                }
            }
        } catch (error) {
            console.error("Lỗi khi kiểm tra thanh toán", error);
        }
    }

</script>
